FREEDOMCUBE

240711 작업 완료

Report
    개요
        언리얼로 복구 완료
            레거시 코드는 사용되지 않음

    기능
        누락된 줌 기능을 제외한 기본 게임 기능 구현 완료
            2x2x2~5x5x5 큐브 지원
            자동셔플 및 플레이/결과 시간 표시
            연습을 위한 수동 모드
            배너광고 포함

    추가 기능 검토
        그래픽 고도화
            일부 라이팅 구현
                더 상세한 라이팅은 게임 구조상 적절하지 않음
            텍스처 컬러 마스킹 등 기능 구현
        3x3x3 이외의 큐브 지원
            2x2x2 ~ 5x5x5 동일 코드로 구현 완료
        이외의 고려사항은 하단 참고

    목표
        -포트폴리오 복구
            스토어에 앱 복구는 완료했으나 개발자 계정 인증이 추가로 필요한 상황
                주소가 포함된 서류가 필요하여 신용카드 명세서를 메일에서 우편으로 변경함
                    -> 명세서 도착하면 처리 예정

        -unreal 스터디
            -셰이더 or 로우 레벨 렌더링
                적용 실패
                모델(메시)는 코드에서 생성함

            -일반적인 게임에 대한 프로젝트/레벨 구조 확인
                전체적인 구조가 1명의 플레이어 캐릭터와 그 이외의 플레이어 혹은 다수의 에너미를 전제로 엔진이 구성되어 있는 것으로 보임
                    ex) FPS, 3인칭 액션게임
                    랜드스케이프가 사실상 강제되며 조명효과 등 도 해당 케이스를 기본으로 적용되어 있으며 일부를 해제하는 것도 쉽지 않음
                단순 구조의 퍼즐게임 작성을 위해서는 유니티 엔진이 더 적절해 보임
                위의 구조에 따라 포함되는 각종 구성요소들이 많아 초기 프로젝트 설정이 난해했음
                해당 프로젝트에서 사용되지 않는 요소에 의해 혼란이 야기되었음
                    폰
                    멀티플레이어
                    등
                레벨을 구성하는 액터의 구조화가 컴포넌트를 통해 이루어지는 것으로 보여 컴포짓 형태로 구성하는것이 간단하지 않음
                    액터의 개념 상의 특징으로 보임
                월드에서 카메라 조작이 생각대로 되지 않아 불편
                특정 액터를 비활성화 하는 기능이 부족하여 개발 단계에서 이것저것 테스트해보기엔 부적절
                월드 구성요소는 git의 기능을 거의 사용할 수 없음(lfs로 관리)
            -블루프린트
                기본적인 구성요소(브랜치 등)에 익숙해지면 간단한 기능 구현이 확실히 편리함
                배열/벡터 원소 분리 등 일부 기능이 있는지 여부나 노드명 찾는데 어려움을 겪음
                필요한 기능에 대한 노드 이름을 찾는데 chatgpt가 큰 도움이 되었음
                그래프를 간략화하기 위해 변수화와 관련된 기능에 대하여 더 공부가 필요함
            -c++ 스크립트
                기대 이상으로 라이브코딩 및 디버깅 기능이 강력했음
                    초기 디버거를 붙이는 방법을 몰라 고전함
                        디버거를 붙인 후 라이브 코딩 시 활성화됨
                enum 관련
                    상당히 편리한 매크로 제공
                    enum 구성 변경에 따른 라이브코딩이 되지 않는점은 불편했음
                    enum 관련 매크로를 인텔리센스가 인식하도록 하는 방법을 몰라 작업 지연됨
                        언리얼과 독립된 코드에서만 문제 발생
                        비주얼스튜디오 프로젝트 새로고침 시 정상화됨
                        프로젝트에 포함된 cpp 속성(nmake관련으로 기억함) 변경으로 가능
                언리얼 관련 타입
                    UObject를 상속받는 것으로 상당히 강력한 지원을 받을 수 있음
                        가비지 콜렉팅 등
                    STL 사용이 사실상 제한되어 vector 등 사용을 위해 언리얼 기본타입을 사용하는 것을 피할 수 없었음
            그 외
                안드로이드 빌드 시 스토어의 요구사항을 맞추기 위해 언리얼 설치폴더의 코드 수정이 필요했음
                    일종의 엔진 커스터마이징으로 생각됨
                ndk 등은 특정 버전이 강제됨
                sdk 변경에 대하여 임시폴더 삭제 후 프로그램 재시작 케이스가 많았음
                라이팅 등 기본적으로 제공되는 그래픽 기능을 해제할 수 없는 케이스가 있어 아쉬움
                    디폴트 레벨 기준으로 기능을 해제해 가면서 프로젝트를 설정하는 방식이 적절하지 않다고 느껴짐
                기본 제공 기능이 많은 특징에 따라 바이너리 크기도 컸으며 이를 줄이기 위해 활성화되어있는 다수의 플러그인을 비활성화 해야 했음
                
        언리얼 총평
            기본 제공 기능이 많으나 비활성화가 쉽지 않아 간단한 게임을 만들때 오히려 시간 지연 가능성이 있음
                첫 인상 이상으로 많은 기능이 지원되나 당연히 가능할 것으로 보이는 기능 비활성화가 없는 케이스가 상당수 있었음
            블루프린트와 c++ 양쪽 모두 기대 이상으로 쾌적한 개발 환경을 제공했음
            안드로이드 빌드는 어려웠으나 어느정도는 안드로이드의 특징으로 보아야 할 듯
            이후 프로젝트에서 사용할지 여부는 프로젝트 특성에 따라 달라질 것으로 보임
            git과의 연동은 아쉬움이 있음
            * 유니티는 정책 이슈가 있었으므로 고도 엔진도 검토 대상
            


추후 작업 검토
    정육면체 이외의 형태 추가 구현 고려
    줌 기능
    광고 표시 방식 변경
        클리어 시 전면광고 고려
    조작법 추가/변경
        큐브 회전과 화면 회전 조작법을 스위칭
    튜토리얼 제공
    기록 저장
            

//////////////////////////////////////////////////////////////////////////////////
개요
    기존 cocos2d-x 로 만든 안드로이드용 게임 FREEDOMCUBE 포팅
        cocos2d-x 지원이 종료되어 현재 구글의 요구조건을 충족하는 안드로이드 버전에 맞출 수 없음
    -> 언리얼로 포팅

기능
    기존 게임의 모든 기능을 포함
        3x3x3 큐브 지원
        자동셔플 및 플레이/결과 시간 표시
        연습을 위한 수동 모드
        배너광고 포함

추가 기능 검토
    그래픽 고도화
    3x3x3 이외의 큐브 지원
    광고 표시 방식 변경
        클리어 시 전면광고 고려
    조작법 추가/변경
        큐브 회전과 화면 회전 조작법을 스위칭
    튜토리얼 제공
    기록 저장

목표
    -포트폴리오 복구
    -unreal 스터디
        -일반적인 게임에 대한 프로젝트/레벨 구조 확인
        -블루프린트
        -c++ 스크립트
        -셰이더 or 로우 레벨 렌더링



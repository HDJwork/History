CFM(CompressedFileManager)

개요
    압축 파일 내 여러 파일을 제거하여 재압축 하는 프로그램

기능
    압축 파일을 열어 파일 목록 및 이미지 파일에 대한 미리보기 제공
    압축 파일 내 특정 파일들을 삭제하기 위해 지정
    지정된 파일을 제외하고 재압축
        기존 파일 덮어쓰기
        다른 이름으로 재압축

추가 기능 검토
    임의의 파일을 추가하여 재압축
    재압축 시 압축 파일 내 파일 명 변경

목표
    -Rust 문법 스터디
    -Rust에서 객체지향 설계 대응력 확인
    -DLL을 통한 모듈화 확인
        -Rust에서 C DLL을 로드하는 동작 및 방법 검토
        -Rust로 DLL을 제작하여 차후 독립 모듈 작성 시 Rust를 고려할 가치가 있는지 검증
    -압축 라이브러리 및 임시 경로 처리 활용
    -C# DLL 동적 로드 활용

작업 완료 일자
    24.05.10

report(24.05.10)
    기능
        기본 기능은 모두 구현
        추가 기능 검토사항은 모두 미구현
        
    구현
        압축 기능 (C DLL)
            miniz(C) 라이브러리 래핑하여 필요한 API만 노출하여 작성
        코어 DLL (Rust)
        UI(C# WinForm)
      
    추가 기능 검토  
        특정 파일 삭제에 대하여 여러 파일을 한번에 선택하는 기능 고려
        동작 시 생성되는 임시파일 경로에 대한 cleanup 처리
            현재 강제종료 등의 사유로 제거되지 않은 임시파일은 수동으로 삭제해야 함 

    작업중 처리한 이슈
        인코딩 관련
            Rust는 UTF-8, C는 멀티바이트 C#은 유니코드로 각각 인코딩 호환에서 시간 소요
            miniz의 경우 압축파일 인코딩을 그대로 읽어오는 것으로 보임
                최대한 UTF-8/멀티바이트로 변환하여 처리
                압축 파일 인코딩이 이외의 방식일 경우 크래시 발생 가능성 있음
        C# 핸들 포인터 처리
            핸들에 대한 포인터를 매개변수로 전달하여 처리하는 과정에서 인스턴스 멤버변수(필드)의 포인터를 인스턴스가 유지하는게 불가능 한 것으로 판단됨
            포인터를 멤버변수로 유지하는 것을 포기하고 필요한 때에 직접 포인터를 얻어 처리
        rust
            전역 객체 생성 및 처리
                언어적으로 강력한 제약이 걸려있어 가능하면 사용하지 않는 쪽으로 고려해야 함
                싱글톤 구현도 다양한 우회가 필요
                현재 구현체에서는 일단 전역객체로 처리했으며 추후 비슷한 구현 시 신중히 고민할 필요 있음
            포인터 강제 캐스팅을 통한 핸들 타입 복구
                다형성 복원 실패
                클래스와 트레잇의 근본적인 차이로 보이며 해당 객체 복구가 필요하다면 vtable을 수동으로 오버라이트 하는 처리가 필요한 것으로 보임
                인덱스에 대한 임시 객체를 만들고 이를 핸들로 리턴하여 우회 처리
            동적 생성 및 소멸자 호출 관련
                동적으로 객체를 생성하여 핸들로 리턴하는 처리 및 이러한 핸들을 받아 소멸처리 하는 동작이 매끄럽지 않음
                동적 생성한 객체에 대하여 소멸자가 자동으로 호출되지 않는 문제가 확인되어 시간 소요
            위의 세 이슈로부터 rust를 코어 구현체 DLL로 만드는 방법은 효율적이지 않은 것으로 보임


    각 목표 검증
        -Rust 문법 스터디
            기본이 되는 문법 빛 특징 확인
            미흡한 부분
                모듈 처리 및 빌드 타겟 소스 관련
                라이브러리 임포트 케이스
                동적 생성 및 소멸자 처리
        -Rust에서 객체지향 설계 대응력 확인
            단독 처리에서는 트레잇을 통해 큰 문제 없이 구현 가능해보임
            객체지향 언어의 클래스와는 실제 구현이 다른 부분이 상당부분 확인됨
        -DLL을 통한 모듈화 확인
            -Rust에서 C DLL을 로드하는 동작 및 방법 검토
                확인 완료
                인코딩 문제 발생하여 대응 필요
                    *시간 소요가 작지 않으므로 코드 보존 필요
                동적 로드의 경우 함수의 수가 많을 경우 어느정도 수작업을 피할 수 없을 것으로 보임
                정적 로드의 경우 dll 패스를 자유롭게 지정할 수 없어 개인적으로 비선호
            -Rust로 DLL을 제작하여 차후 독립 모듈 작성 시 Rust를 고려할 가치가 있는지 검증
                프로세스를 가지지 않는 코어 구현체 DLL로 활용하기에는 부적절한 부분이 많은 것으로 확인
                C++ 대비 소유권을 통한 메모리 릭의 위험성 회피가 가장 큰 목적이기 때문에 종합적으로 기대에 미치지 못함
        -압축 라이브러리 및 임시 경로 처리 활용
            필요한 기능 문제 없이 구현 완료
                miniz 라이브러리는 암호처리된 압축파일에 대한 대응은 불가
            임시 경로 활용에 대해서는 더욱 고민할 가치가 있어 보임
        C# DLL 동적 로드 활용
            확인 완료
            인코딩 문제 발생하여 대응 필요
            *코드 구현이 분리되는 문제를 해결하기 위한 코드 형식 보존 필요
            


    